[include homing_override.cfg]




[gcode_macro Unlock_Motor] 
gcode:   
    SET_KINEMATIC_POSITION
    

[gcode_macro UNLOAD_FILAMENT]
gcode = 

  M83 
  M104 S200 ; set extruder temp
  G1 E-100 F2000
  G1 E-100 F2000
  G1 E-100 F2000
  G1 E-50 F2000
  M104 S0
  G92 E0
  G90

[gcode_macro LOAD_FILAMENT]
gcode = 
  M83 
  M104 S200 ; set extruder temp
  heater_active
  M109 S200                        ; wait for hot end temperature to reach e.g. 210C
  G1 E100 F2000
  G1 E100 F2000
  G1 E100 F2000
  G1 E4 F600

  G92 E0
  G90

[gcode_macro PRINT_START]
gcode:

  HOME_Z_LED
  RESPOND TYPE=echo MSG="Z 轴归位"
  {% set homelocation_x = printer["gcode_macro HOMING_VARIABLES"].home_x_position %}
  {% set homelocation_y = printer["gcode_macro HOMING_VARIABLES"].home_y_position %}
  RESPOND TYPE=echo MSG="正在归位 Z 轴……"
  G90
  G0 X{homelocation_x} Y{homelocation_y} F10000
  G28 X Z
  #BED_TILT_CALIBRATE

  
  #G1 Z15 F10000

  
  working   ; color orange - printing color
  #G1 X42 Y175 F7200                               ; move to start
  #G1 Z0.3 F800                                  ; Move to layer height
  #G1 X142 Y175 E22 F800                           ; print prime line
  #G1 X142 Y173 F7200                              ; move to start
  #G1 X42 Y173 E44 F800                            ; print prime line

  G1 X6 Y170 Z1 F7200
  M83
  G1 E40 F150
  G1 Z5 F500

[gcode_macro PRINT_END]
gcode:
  
  M104 S0
  M140 S0
  complete
  # Retract the filament
  G92 E1
  G1 E-50 F10000
  G1 X80 Y142.50 F3000
  G91
  G1 Z80 F800
  G90
  M84
  G4  P1000 ; wait a second
  temperature_LED


[gcode_macro over]
gcode:
  M104 S200 ; set extruder temp
  heater_active
  G28
  G0 X131 Y62 Z0 F10000
  UNLOAD_FILAMENT


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}

  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  
  M106 S0
  M104 S0
  M140 S0
  
  complete
  # Retract the filament
  
  G1 X80 Y142.50 F3000
  G91
  G1 Z80 F800
  G90
  M84
  G4  P1000 ; wait a second
  temperature_LED
  
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z25 F800
    G1 X80 Y142.50 F3000
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  